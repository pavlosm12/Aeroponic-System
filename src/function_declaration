#include <DS3132_p>
#include <Bluetooth_module>


int state_prev_light = 0;
int state_light = 0;
int light_Schedule_dur = 0;
void SM_light() {

state_prev_light = state_light;

//state machine section
switch (state_light)
{
  case 0: //RESET
  state_light = 1;
  break;

 case 1: //Check TimePicker & Initialize
 if ((timepicker_hours == hours) && (timepicker_minutes == minutes))
 { //ticks = 0;
   state_light = 2;
  }
break;

  case 2: //Convert slider value to hours, reset ticks and proceed
  
  light_Schedule_dur = light_onDuration * 3600; 
  //ticks = 0;
  state_light = 3;
  break;

  case 3: //Set pwm value, wait for the hours to pass, set pwm to LOW, reset ticks then procceed.
   analogWrite(light, light_Intensity);

   if (ticks != old_tick_value) 
   {  light_Schedule_dur--;

if (light_Schedule_dur <= 0)
{
  state_light = 4;
}
   }
    break;
    
    case 4:
    analogWrite(light, LOW);
    state_light = 0;
    break;

  }
}



/*  Prints the current state of switch case of SM_writeEEPROM() function
    for debugging purpose */

void print_state_readEEPROM (){
if(state_readEEPROM != state_prev_readEEPROM)
{
Serial.print("                     STATE READ EEPROM = ") ; 
Serial.println(state_readEEPROM);
}
}

/*  Prints the current state of switch case of SM_readEEPROM() function
    for debugging purpose */
void print_state_writeEEPROM (){
if(state_writeEEPROM != state_prev_writeEEPROM)
{
Serial.print("                     STATE WRITE EEPROM = ") ; 
Serial.println(state_writeEEPROM);
}
}


void print_state_light (){
if(state_light != state_prev_light)
{
Serial.print("                     STATE LIGHT = ") ; 
Serial.println(state_light);
}
}

int pump_state = HIGH;

void pressure() 
{

  if (pump_state == HIGH) // checks if the pump is ON
  {
  pressureValue = analogRead(pressureInput); //reads value from input pin and assigns to variable
  
  pressureValue = ((pressureValue-pressureZero)*pressuretransducermaxPSI)/(pressureMax-pressureZero); //conversion equation to convert analog reading to psi
  psi_scaled = round(100 * pressureValue);  // rounds the pressure value and multiplies it by 100
  
  }
  

}

void send_data(){ // Sends data over bluetooth every 2 seconds 

 if(millis() >= time_now2 + period2)
{
  /*
  Serial.println("\n \t");
 // Serial.print(tank_level);
  Serial.println("\n \t");
 //  Serial.print(distance);
  Serial.print(!pump_state);
  Serial.println("\n \t");
  Serial.print(pressureValue);
  Serial.println("\t \t");
  Serial.print(psi_scaled);
  Serial.println("\t \t \t");
*/
  //Serial.print("Ping: ");
 // Serial.print(waterTank_level); // Ping returned, uS result in ping_result, convert to cm with US_ROUNDTRIP_CM.
  //Serial.println("cm");
 shtc3(); // gets shtc3 Temperature and Humidity reading
 TSL2561B(); // gets TSL2561 lux, full spectrum, ir readings

send_BT(temp_SHTC3_ID, t_scaled);    // function to write id and value to the bluetooth interface (and split value in MSB and LSB        
send_BT(humidity_SHTC3_ID, h_scaled);    // function to write id and value to the bluetooth interface (and split value in MSB and LSB
send_BT(hours_ID,hours);
send_BT(minutes_ID,minutes);
send_BT(pressure_ID, psi_scaled); 
send_BT(ultrasonic_ID, waterTank_level);
 
 if ((lux > 16000) && (lux <= 65535))
 {
  lux_underscaled = round(lux / 100);
  send_BT(TSL2561_LUX_ID_underscaled, lux_underscaled);
 }
 else 
 {
  send_BT(TSL2561_LUX_ID, lux);
 }

 if ((full > 16000) && (full <= 65535))
 {
  full_underscaled = round(full / 100);
  send_BT(TSL2561_FSpec_ID_underscaled, full_underscaled);
 }
 else 
 {
  send_BT(TSL2561_FSpec_ID, full);
 }

 if ((ir > 16000) && (ir <= 65535))
 {
  ir_underscaled = round(ir / 100);
  send_BT(TSL2561_IR_ID_underscaled, ir_underscaled);
 }
 else 
 {
  send_BT(TSL2561_IR_ID, ir);
 }
 
 time_now2 += period2;
  }
}







const int pump = 4; // define pump pin
unsigned long prev_millis = 0;


void pumpTimings()
{

  pump_onDuration_UL = pump_onDuration * 1000;
  pump_offDuration_UL = pump_offDuration * 60000; 
 // check to see if it's time to change the state of the pump
 

  if (Auto_EN_DIS != 0)
{

 Manual_ON_OFF = 0;
 unsigned long currentMillis = millis();
 // HIGH = OFF . LOW = ON // LOW LVL RELAY MODULE
  if((pump_state == HIGH) && (currentMillis - prev_millis >= pump_onDuration_UL))
  {
    pump_state = LOW;  // Turn it off
    prev_millis = currentMillis;  // Remember the time
    digitalWrite(pump, !pump_state);  // Update the actual pump
  }
  else if ((pump_state == LOW) && (currentMillis - prev_millis >= pump_offDuration_UL))
  {
    pump_state = HIGH;  // turn it on
    prev_millis = currentMillis;   // Remember the time
    digitalWrite(pump, !pump_state);	  // Update the actual pump
  }
 }
 
 if (Auto_EN_DIS !=1)
{
pump_state = Manual_ON_OFF;
digitalWrite (pump,!pump_state);

}
}







int buzzer_state = LOW;
unsigned long prev_millis2 = 0;
unsigned long buzzer_onTime = 800;
unsigned long buzzer_offTime = 3500;

void buzzerTimings ()
{

if (waterTank_level < WaterTank_Alarm_Level)

{
  set_alarm = 1;
}

else if (( pressureValue < Lower_pressure_TH) || ( pressureValue > Upper_pressure_TH))
{
  set_alarm = 1;
}
else
{
  set_alarm = 0;
  buzzer_state = LOW;
  digitalWrite(buzzer, buzzer_state); 
}


if (set_alarm !=0)
{

unsigned long currentMillis2 = millis();
 
  if((buzzer_state == HIGH) && (currentMillis2 - prev_millis2 >= buzzer_onTime))
  {
    buzzer_state = LOW;  // Turn it off
    prev_millis2 = currentMillis2;  // Remember the time
    digitalWrite(buzzer, buzzer_state);  // Update the actual pump
  
  }
  else if ((buzzer_state == LOW) && (currentMillis2 - prev_millis2 >= buzzer_offTime))
  {
    buzzer_state = HIGH;  // turn it on
    prev_millis2 = currentMillis2;   // Remember the time
    digitalWrite(buzzer, buzzer_state);	  // Update the actual pump
  }

}

}