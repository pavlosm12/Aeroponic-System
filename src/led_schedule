#include <DS3132_p>
#include <Bluetooth_module>
//SM_pump() variables
int state_pump = 0 ;
int state_prev_pump = 0;

int state_led1 = 0 ;
int state_prev_led1 = 0;

void SM_led1 () {

state_prev_led1 = state_led1;

//state machine section

switch (state_led1)
{
  case 0: //RESET
  state_led1 = 1;
  break;

 case 1: //Check TimePicker & Initialize
 if ((timepicker_hours == hours) && (timepicker_minutes == minutes)){state_led1 = 2;}
break;

//case 44: //Check TimePicker & Initialize
// if (timepicker_minutes == minutes){state_led1 = 2;}
//break;

  case 2: //Set PWM
  analogWrite(led3, ledstrip_pwm);
  hours_counter = ledstrip_duration;
  state_led1 = 3;
  break;

  case 3:
  if (hours != old_hours_value) {
        old_hours_value = hours;
        hours_counter--;

if (hours_counter < 0)
{
  state_led1 = 4;
}
  }
    break;

    case 4:
  analogWrite(led3, ledstrip_pwm2);
  hours_counter = ledstrip_duration2;
  state_led1 = 5;
    break;

    case 5:
    
  if (hours != old_hours_value) {
        old_hours_value = hours;
        hours_counter--;


if (hours_counter <= 0)
{
  state_led1 = 6;
}
  }
    break;

  case 6:
  analogWrite(led3, ledstrip_pwm3);
  hours_counter = ledstrip_duration3 ;
  state_led1 = 7;
    break;

    case 7:
    
  if (hours != old_hours_value) {
        old_hours_value = hours;
        hours_counter--;

if (hours_counter <= 0)
{
  state_led1 = 8;
}
  }
    break;
    
    case 8:
    analogWrite(led3, 0);
  
    timepicker_hours = -1; // To may remove this
    timepicker_minutes = -1; // and this
    state_led1 = 0;
    break;

}

}


void print_state_led1 (){
if(state_led1 != state_prev_led1)
{
Serial.print("                     STATE LED 1 = ") ; 
Serial.println(state_led1);
}
}

void print_state_pump (){
if(state_pump != state_prev_pump)
{
Serial.print("\n \n \t STATE PUMP = ") ; 
Serial.println(state_pump);
}
}


void test12 (){

 if(millis() >= time_now2 + period2)
{
  Tmp36();
  Ky_018();
  Dht_11();
        time_now2 += period2;
  send_BT(tmp36_temperature_ID,temp36_temperature_scaled);  
  send_BT(photoValue_ID,photoValue);
  send_BT(humidity_ID, h_scaled);    // function to write id and value to the bluetooth interface (and split value in MSB and LSB
  send_BT(tempdht11_ID, t_scaled);    // function to write id and value to the bluetooth interface (and split value in MSB and LSB
}
 
 

if (blink_enable == 1)
{
currentMillis = millis();
if((ledState == HIGH) && (currentMillis - previousMillis >= led_on))
    {
    	ledState = LOW;  // Turn it off
      previousMillis = currentMillis;  // Remember the time
      digitalWrite(led2, ledState);  // Update the actual LED
    }
    else if ((ledState == LOW) && (currentMillis - previousMillis >= led_off))
    {
      ledState = HIGH;  // turn it on
      previousMillis = currentMillis;   // Remember the time
      digitalWrite(led2, ledState);	  // Update the actual LED
    }    
}

 if (blink_enable == 0)
{
  state_pump = 1;
}
   

}




void SM_pump () {

state_prev_pump = state_pump;

//state machine section

switch (state_pump)
{
  case 0: //RESET
  state_pump = 1;
  break;

  case 1: //Do nothing and wait for pump enable. Turn off pump and procceed.
  
  if (blink_enable == 1)
  {
  digitalWrite(led1, LOW);
  state_pump = 2;
  }
  break;

 case 2: //Update offDuration value
 if (blink_enable == 1)
 {
   
   state_pump = 3;
 }
break;

  case 3: //turn pump off and procceed.
  digitalWrite(led1, LOW);
  seconds_counter = pump_offDuration * 60; 
  state_pump = 4;
  break;

  case 4: // Start offDuration Timer
  if (seconds != old_seconds_value) {
        old_seconds_value = seconds;
        seconds_counter--;    
if (seconds_counter <= 0)
{
  state_pump = 5;
}
  }
    break;

    case 5: //update on-Duration value.
    digitalWrite(led1, HIGH);
    seconds_counter = pump_onDuration;
    state_pump = 6;
    break;

    case 6: // Turn on pump
   
    state_pump = 7;
    break;

    case 7: //Start onDuration Timer
if (seconds != old_seconds_value) {
        old_seconds_value = seconds;
        seconds_counter--;
        
if (seconds_counter <=0)
{
  state_pump = 8;
}
  }
  break;
    case 8: // Make timer Zero and go to state 0
    seconds_counter = 0;
    state_pump = 0;
    break;
  }
}